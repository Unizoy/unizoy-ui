{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "handlebars",
  "type": "registry:ui",
  "author": "Unizoy (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/handlebars.tsx",
      "content": "\"use client\"\n\nimport React, {\n  useRef,\n  useEffect,\n  useState,\n  type PropsWithChildren,\n} from \"react\"\nimport { gsap } from \"gsap\"\nimport { Draggable } from \"gsap/Draggable\"\n\n// Register the Draggable plugin with GSAP\ngsap.registerPlugin(Draggable)\n\ntype HandlebarsProps = PropsWithChildren\n\nfunction Handlebars({ children }: HandlebarsProps) {\n  // Refs for the elements we'll be animating or interacting with\n  const containerRef = useRef<HTMLDivElement>(null)\n  const leftHandleRef = useRef<HTMLDivElement>(null)\n  const rightHandleRef = useRef<HTMLDivElement>(null)\n  const contentRef = useRef<HTMLSpanElement>(null)\n\n  // Refs to store the Draggable instances\n  const leftDraggableRef = useRef<Draggable[] | null>(null)\n  const rightDraggableRef = useRef<Draggable[] | null>(null)\n\n  // State to hold the width of the container\n  const [width, setWidth] = useState(0)\n\n  // This effect runs once to set up a ResizeObserver\n  useEffect(() => {\n    const el = containerRef.current\n    if (!el) return\n\n    const observer = new ResizeObserver((entries) => {\n      const entry = entries[0]\n      if (entry) {\n        setWidth(entry.contentRect.width)\n      }\n    })\n\n    observer.observe(el)\n    return () => observer.disconnect()\n  }, [])\n\n  // Initialize draggables and set up initial positions\n  useEffect(() => {\n    if (\n      !leftHandleRef.current ||\n      !rightHandleRef.current ||\n      !contentRef.current ||\n      width === 0\n    ) {\n      return\n    }\n\n    // Clean up existing draggables if they exist\n    if (leftDraggableRef.current) {\n      leftDraggableRef.current[0].kill()\n    }\n    if (rightDraggableRef.current) {\n      rightDraggableRef.current[0].kill()\n    }\n\n    // Set initial positions\n    gsap.set(leftHandleRef.current, { x: 0 })\n    gsap.set(rightHandleRef.current, { x: width - 28 })\n\n    // Helper function to update the CSS mask\n    const updateMask = () => {\n      if (\n        !contentRef.current ||\n        !leftDraggableRef.current ||\n        !rightDraggableRef.current\n      )\n        return\n\n      const leftX = leftDraggableRef.current[0].x\n      const rightX = rightDraggableRef.current[0].x + 28 // Add handle width to right position\n\n      const leftPercent = Math.max(0, Math.min(100, (leftX / width) * 100))\n      const rightPercent = Math.max(0, Math.min(100, (rightX / width) * 100))\n\n      const maskValue = `linear-gradient(90deg, \n        transparent 0%, \n        transparent ${leftPercent}%, \n        black ${leftPercent}%, \n        black ${rightPercent}%, \n        transparent ${rightPercent}%, \n        transparent 100%)`\n\n      gsap.set(contentRef.current, {\n        mask: maskValue,\n        webkitMask: maskValue,\n      })\n    }\n\n    // Create Left Draggable Handle\n    leftDraggableRef.current = Draggable.create(leftHandleRef.current, {\n      type: \"x\",\n      bounds: { minX: 0, maxX: width - 28 }, // Can go all the way to the right edge\n      onDrag: function () {\n        updateMask()\n        // Update right handle bounds - can touch but not overlap\n        if (rightDraggableRef.current) {\n          rightDraggableRef.current[0].applyBounds({\n            minX: this.x + 28, // Right handle starts where left handle ends (touching)\n            maxX: width - 28\n          })\n        }\n      },\n      onPress: function () {\n        gsap.to(this.target, { scale: 1.1, duration: 0.2 })\n      },\n      onRelease: function () {\n        gsap.to(this.target, { scale: 1, duration: 0.2 })\n      },\n    })\n\n    // Create Right Draggable Handle\n    rightDraggableRef.current = Draggable.create(rightHandleRef.current, {\n      type: \"x\",\n      bounds: { minX: 28, maxX: width - 28 }, // Can touch left handle but not overlap\n      onDrag: function () {\n        updateMask()\n        // Update left handle bounds - can touch but not overlap\n        if (leftDraggableRef.current) {\n          leftDraggableRef.current[0].applyBounds({\n            minX: 0,\n            maxX: this.x - 28 // Left handle can go up to where right handle starts (touching)\n          })\n        }\n      },\n      onPress: function () {\n        gsap.to(this.target, { scale: 1.1, duration: 0.2 })\n      },\n      onRelease: function () {\n        gsap.to(this.target, { scale: 1, duration: 0.2 })\n      },\n    })\n\n    // Set initial mask to show full content\n    updateMask()\n\n    // Cleanup function\n    return () => {\n      leftDraggableRef.current?.[0].kill()\n      rightDraggableRef.current?.[0].kill()\n    }\n  }, [width]) // Re-run when width changes\n\n  return (\n    <div className=\"flex justify-center gap-4 leading-16\">\n      <div\n        ref={containerRef}\n        className=\"relative -rotate-[2.76deg] mt-0.5 w-64 md:w-96\"\n      >\n        {/* The main container for the content and handles */}\n        <div className=\"absolute inset-0 w-full h-full rounded-2xl border border-yellow-500 flex justify-between z-1\">\n          {/* Left Handle */}\n          <div\n            ref={leftHandleRef}\n            className=\"absolute z-10 h-full border border-yellow-500 w-7 rounded-full bg-gray-800 flex items-center justify-center select-none cursor-grab active:cursor-grabbing\"\n            style={{ left: 0 }}\n          >\n            <div className=\"w-2 h-8 rounded-full bg-yellow-500\" />\n          </div>\n\n          {/* Right Handle */}\n          <div\n            ref={rightHandleRef}\n            className=\"absolute z-10 h-full border border-yellow-500 w-7 rounded-full bg-gray-800 flex items-center justify-center select-none cursor-grab active:cursor-grabbing\"\n            style={{ left: 0 }}\n          >\n            <div className=\"w-2 h-8 rounded-full bg-yellow-500\" />\n          </div>\n        </div>\n\n        {/* The content that gets masked */}\n        <span\n          ref={contentRef}\n          className=\"inline-flex items-center justify-center w-full h-full px-9 relative rounded-2xl\"\n        >\n          {children}\n\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport { Handlebars }",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}